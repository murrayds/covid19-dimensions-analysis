###############################################################################
# Snakefile
#
# Author: dakota.s.murray@gmail.com
#
# Run with the Snakemake workflow automation tool
###############################################################################

###############################################################################
# Imports
###############################################################################
from os.path import join as j

###############################################################################
# Configuration
###############################################################################
configfile:
    "../config/config.json"

###############################################################################
# Folders
###############################################################################
DATA_HOME = config['data_path']
BQ_HOME = j(DATA_HOME, "bq-data")

###############################################################################
# BQ Data Files
###############################################################################
LEADING_ORGS = j(BQ_HOME, "leading_orgs", "leading_orgs_{topic}.tsv")
LEADING_AUTHORS = j(BQ_HOME, "leading_authors", "leading_authors_{topic}_{metric}.tsv")
LEADING_PUBS = j(BQ_HOME, "leading_pubs", "leading_pubs_{topic}_{metric}.tsv")

ORG_TOP_AUTHORS = j(BQ_HOME, 'leading_orgs', "org_top_authors.tsv")

PUB_CONCEPTS = j(BQ_HOME, "pub_concepts", "pub_concepts.tsv")

FUNDING_ORGS = j(BQ_HOME, "funding_orgs", "funding_orgs_{topic}.tsv")

PUBS_OVER_TIME = j(BQ_HOME, "temporal", "pubs_over_time_{topic}.tsv")

TOPIC_FILTERS = ["covid-all", "covid-vaccine"]
METRICS = ["pubcount", "citations", "altmetrics"]


###############################################################################
# Target Rule
###############################################################################
rule all:
    input:
        expand(LEADING_ORGS, topic = TOPIC_FILTERS),
        expand(LEADING_AUTHORS, topic = TOPIC_FILTERS, metric = METRICS),
        expand(LEADING_PUBS, topic = TOPIC_FILTERS, metric = METRICS[1:]),
        ORG_TOP_AUTHORS,
        PUB_CONCEPTS,
        expand(FUNDING_ORGS, topic = TOPIC_FILTERS),
        expand(PUBS_OVER_TIME, topic = TOPIC_FILTERS)

rule fetch_leading_orgs:
    output: LEADING_ORGS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_leading_orgs.py"

rule fetch_leading_authors:
    params: lambda wc: wc.get("metric")
    output: LEADING_AUTHORS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_leading_authors.py"

rule fetch_leading_pubs:
    params: lambda wc: wc.get("metric")
    output: LEADING_PUBS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_leading_pubs.py"

rule fetch_org_fields:
    output: ORG_TOP_AUTHORS,
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_org_top_authors.py"

rule fetch_pub_concepts:
    output: PUB_CONCEPTS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_pub_concepts.py"

rule fetch_funding_orgs:
    output: FUNDING_ORGS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_funding_orgs.py"

rule fetch_pubs_over_time:
    output: PUBS_OVER_TIME
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_pubs_over_time.py"
