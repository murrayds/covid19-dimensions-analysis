###############################################################################
# Snakefile
#
# Author: dakota.s.murray@gmail.com
#
# Run with the Snakemake workflow automation tool
###############################################################################

###############################################################################
# Imports
###############################################################################
from os.path import join as j

###############################################################################
# Configuration
###############################################################################
configfile:
    "../config/config.json"

###############################################################################
# Folders
###############################################################################
DATA_HOME = config['data_path']
BQ_HOME = j(DATA_HOME, "bq-data")
DERIVED = j(DATA_HOME, "derived")
FIGURES = j(DATA_HOME, "figures")

###############################################################################
# MISC FILES
###############################################################################
GENDER_MATCHING = j(DATA_HOME, "additional", "gender_matching.csv")

###############################################################################
# BQ Data Files
###############################################################################
LEADING_ORGS = j(BQ_HOME, "leading_orgs", "leading_orgs_{topic}.tsv")
LEADING_AUTHORS = j(BQ_HOME, "leading_authors", "leading_authors_{topic}_{metric}.tsv")
LEADING_PUBS = j(BQ_HOME, "leading_pubs", "leading_pubs_{topic}_{metric}.tsv")

ORG_TOP_AUTHORS = j(BQ_HOME, 'leading_orgs', "org_top_authors.tsv")
ORG_TOP_FUNDERS = j(BQ_HOME, 'leading_orgs', "org_top_funders.tsv")
ORG_TOP_PUBS = j(BQ_HOME, 'leading_orgs', "org_top_pubs.tsv")

PUB_CONCEPTS = j(BQ_HOME, "pub_concepts", "pub_concepts.tsv")

CONCEPT_FREQ = j(BQ_HOME, "concept_frequencies.tsv")

FUNDING_ORGS = j(BQ_HOME, "funding_orgs", "funding_orgs_{topic}.tsv")
FUNDING_RECIPIENTS = j(BQ_HOME, "funding_orgs", "funding_recipients_{topic}.tsv")
FUNDING_INVESTIGATORS = j(BQ_HOME, "funding_orgs", "funding_investigators_{topic}.tsv")

PUBS_OVER_TIME = j(BQ_HOME, "temporal", "pubs_over_time_{topic}.tsv")

CONCEPT_EMBEDDING = j(DERIVED, "embedding", "concepts_embedding_{dim}.bin")
CONCEPT_EMBEDDING_2D = j(DERIVED, "embedding", "concepts_embedding_projection_{dim}.tsv")
CONCEPT_PROJECTION_DF = j(DERIVED, "embedding", "coords", "concept_embedding_projection_df_{dim}.tsv")
CONCEPT_PROJECTION_PLOT = j(FIGURES, "embedding", "concept_embedding_projection_{dim}_plot.png")
AUTHORS_WITH_GENDER = j(DERIVED, "gender", "authors_with_gender_{topic}.tsv")

S2ORC_DISAGREEMENT = j(BQ_HOME, "text", "s2orc_disagreement_counts.tsv")

TOPIC_FILTERS = ["covid-all", "covid-vaccine"]
METRICS = ["pubcount", "citations", "altmetrics"]


W2VDIMS =[50, 100, 150]

###############################################################################
# Target Rule
###############################################################################
rule all:
    input:
        expand(LEADING_ORGS, topic = TOPIC_FILTERS),
        expand(LEADING_AUTHORS, topic = TOPIC_FILTERS, metric = METRICS),
        expand(LEADING_PUBS, topic = TOPIC_FILTERS, metric = METRICS[1:]),
        ORG_TOP_AUTHORS,
        ORG_TOP_FUNDERS,
        ORG_TOP_PUBS,
        PUB_CONCEPTS,
        CONCEPT_FREQ,
        expand(FUNDING_ORGS, topic = TOPIC_FILTERS),
        expand(FUNDING_RECIPIENTS, topic = TOPIC_FILTERS),
        expand(FUNDING_INVESTIGATORS, topic = TOPIC_FILTERS),
        expand(PUBS_OVER_TIME, topic = TOPIC_FILTERS),
        expand(CONCEPT_EMBEDDING, dim = W2VDIMS),
        expand(CONCEPT_EMBEDDING_2D, dim = W2VDIMS),
        expand(CONCEPT_PROJECTION_DF, dim = W2VDIMS),
        expand(CONCEPT_PROJECTION_PLOT, dim = W2VDIMS),
        expand(AUTHORS_WITH_GENDER, topic = TOPIC_FILTERS),
        S2ORC_DISAGREEMENT
        #S2ORC_SENTENCES

rule fetch_leading_orgs:
    output: LEADING_ORGS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_leading_orgs.py"

rule fetch_leading_authors:
    params: lambda wc: wc.get("metric")
    output: LEADING_AUTHORS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_leading_authors.py"

rule fetch_leading_pubs:
    params: lambda wc: wc.get("metric")
    output: LEADING_PUBS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_leading_pubs.py"

rule fetch_org_top_authors:
    output: ORG_TOP_AUTHORS,
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_org_top_authors.py"

rule fetch_org_top_funders:
    output: ORG_TOP_FUNDERS,
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_org_top_funders.py"

rule fetch_org_top_pubs:
    output: ORG_TOP_PUBS,
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_org_top_pubs.py"

rule fetch_pub_concepts:
    output: PUB_CONCEPTS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_pub_concepts.py"

rule fetch_concept_frequencies:
    output: CONCEPT_FREQ
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_concept_frequency.py"

rule fetch_funding_orgs:
    output: FUNDING_ORGS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_funding_orgs.py"

rule fetch_funding_orgs_recipients:
    output: FUNDING_RECIPIENTS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_funding_orgs_recipients.py"

rule fetch_funding_investigators:
    output: FUNDING_INVESTIGATORS
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_funding_investigators.py"

rule fetch_pubs_over_time:
    output: PUBS_OVER_TIME
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_pubs_over_time.py"

rule embed_concepts:
    input: rules.fetch_pub_concepts.output
    params: lambda wc: wc.get("dim")
    output: CONCEPT_EMBEDDING
    conda: "envs/embed.yaml"
    script: "scripts/embed_concepts.py"

rule dimreduce_with_umap:
    input: rules.embed_concepts.output
    output: CONCEPT_EMBEDDING_2D
    conda: "envs/embed.yaml"
    script: "scripts/dimreduce_with_umap.py"

rule build_projection_dataframe:
    input:
        rules.dimreduce_with_umap.output,
        rules.fetch_concept_frequencies.output
    output: CONCEPT_PROJECTION_DF
    conda: "envs/r.yaml"
    script: "scripts/build_projection_dataframe.R"

rule plot_projection_dataframe:
    input:
        rules.build_projection_dataframe.output,
    output: CONCEPT_PROJECTION_PLOT
    conda: "envs/r.yaml"
    script: "scripts/plot_projection_dataframe.R"

rule fetch_matched_s2orc_sentences:
    output: S2ORC_DISAGREEMENT
    conda: "envs/bigquery.yaml"
    script: "scripts/fetch_disagreement_sentence_counts.py"

rule assign_gender_to_authors:
    input:
        rules.fetch_funding_investigators.output,
        GENDER_MATCHING
    conda: "envs/r.yaml"
    output: AUTHORS_WITH_GENDER
    script: "scripts/assign_gender_to_authors.R"
